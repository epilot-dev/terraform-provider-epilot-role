// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-role/internal/sdk/internal/utils"
	"time"
)

type Type string

const (
	TypeUserRole    Type = "user_role"
	TypeOrgRole     Type = "org_role"
	TypeShareRole   Type = "share_role"
	TypePartnerRole Type = "partner_role"
	TypePortalRole  Type = "portal_role"
)

func (e Type) ToPointer() *Type {
	return &e
}
func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user_role":
		fallthrough
	case "org_role":
		fallthrough
	case "share_role":
		fallthrough
	case "partner_role":
		fallthrough
	case "portal_role":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

// CreateRolePayload - A payload to create or update a role with attached grants.
type CreateRolePayload struct {
	// date and time then the role will expire
	ExpiresAt *time.Time              `json:"expires_at,omitempty"`
	Grants    []GrantWithDependencies `json:"grants"`
	// Format: <organization_id>:<slug>
	ID *string `json:"id,omitempty"`
	// Human-friendly name for the role
	Name string `json:"name"`
	// Id of an organization
	OrganizationID *string `json:"organization_id,omitempty"`
	PartnerOrgID   *string `json:"partner_org_id,omitempty"`
	// The pricing tier of the organization this root role is based on
	PricingTier *string `json:"pricing_tier,omitempty"`
	// URL-friendly name for the role
	Slug string `json:"slug"`
	Type Type   `json:"type"`
}

func (c CreateRolePayload) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateRolePayload) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateRolePayload) GetExpiresAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *CreateRolePayload) GetGrants() []GrantWithDependencies {
	if o == nil {
		return []GrantWithDependencies{}
	}
	return o.Grants
}

func (o *CreateRolePayload) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CreateRolePayload) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateRolePayload) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

func (o *CreateRolePayload) GetPartnerOrgID() *string {
	if o == nil {
		return nil
	}
	return o.PartnerOrgID
}

func (o *CreateRolePayload) GetPricingTier() *string {
	if o == nil {
		return nil
	}
	return o.PricingTier
}

func (o *CreateRolePayload) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *CreateRolePayload) GetType() Type {
	if o == nil {
		return Type("")
	}
	return o.Type
}
