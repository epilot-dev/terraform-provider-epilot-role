// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-role/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-role/internal/sdk"
	"github.com/epilot-dev/terraform-provider-epilot-role/internal/sdk/models/operations"
	"github.com/epilot-dev/terraform-provider-epilot-role/internal/validators"
	speakeasy_listvalidators "github.com/epilot-dev/terraform-provider-epilot-role/internal/validators/listvalidators"
	speakeasy_objectvalidators "github.com/epilot-dev/terraform-provider-epilot-role/internal/validators/objectvalidators"
	speakeasy_stringvalidators "github.com/epilot-dev/terraform-provider-epilot-role/internal/validators/stringvalidators"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &RoleResource{}
var _ resource.ResourceWithImportState = &RoleResource{}

func NewRoleResource() resource.Resource {
	return &RoleResource{}
}

// RoleResource defines the resource implementation.
type RoleResource struct {
	client *sdk.SDK
}

// RoleResourceModel describes the resource data model.
type RoleResourceModel struct {
	ExpiresAt      types.String    `tfsdk:"expires_at"`
	Grants         []tfTypes.Grant `tfsdk:"grants"`
	ID             types.String    `tfsdk:"id"`
	Name           types.String    `tfsdk:"name"`
	OrganizationID types.String    `tfsdk:"organization_id"`
	PartnerOrgID   types.String    `tfsdk:"partner_org_id"`
	PricingTier    types.String    `tfsdk:"pricing_tier"`
	Slug           types.String    `tfsdk:"slug"`
	Type           types.String    `tfsdk:"type"`
}

func (r *RoleResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_role"
}

func (r *RoleResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Role Resource",
		Attributes: map[string]schema.Attribute{
			"expires_at": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `date and time then the role will expire`,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"grants": schema.ListNestedAttribute{
				Required: true,
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					Attributes: map[string]schema.Attribute{
						"action": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
						"conditions": schema.ListNestedAttribute{
							Computed: true,
							Optional: true,
							NestedObject: schema.NestedAttributeObject{
								Validators: []validator.Object{
									speakeasy_objectvalidators.NotNull(),
								},
								Attributes: map[string]schema.Attribute{
									"equals_condition": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"attribute": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
												},
											},
											"operation": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `Not Null; must be "equals"`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
													stringvalidator.OneOf("equals"),
												},
											},
											"values": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
												Description: `Not Null`,
												Validators: []validator.List{
													speakeasy_listvalidators.NotNull(),
													listvalidator.ValueStringsAre(validators.IsValidJSON()),
												},
											},
										},
										Description: `Check if attribute equals to any of the values`,
									},
								},
							},
						},
						"dependencies": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `Provided additional dependencies, exploded when storing the role. Parsed as JSON.`,
							Validators: []validator.String{
								validators.IsValidJSON(),
							},
						},
						"effect": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Default:     stringdefault.StaticString("allow"),
							Description: `Default: "allow"; must be one of ["allow", "deny"]`,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"allow",
									"deny",
								),
							},
						},
						"resource": schema.StringAttribute{
							Computed: true,
							Optional: true,
						},
					},
				},
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Format: <organization_id>:<slug>`,
			},
			"name": schema.StringAttribute{
				Required:    true,
				Description: `Human-friendly name for the role`,
			},
			"organization_id": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Id of an organization`,
			},
			"partner_org_id": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"pricing_tier": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `The pricing tier of the organization this root role is based on`,
			},
			"slug": schema.StringAttribute{
				Required:    true,
				Description: `URL-friendly name for the role`,
			},
			"type": schema.StringAttribute{
				Required:    true,
				Description: `must be one of ["user_role", "org_role", "share_role", "partner_role", "portal_role"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"user_role",
						"org_role",
						"share_role",
						"partner_role",
						"portal_role",
					),
				},
			},
		},
	}
}

func (r *RoleResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *RoleResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *RoleResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request := data.ToSharedCreateRolePayload()
	res, err := r.client.Roles.CreateRole(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Role != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedRole(res.Role)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var roleID string
	roleID = data.ID.ValueString()

	request1 := operations.GetRoleRequest{
		RoleID: roleID,
	}
	res1, err := r.client.Roles.GetRole(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.Role != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromSharedRole(res1.Role)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *RoleResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *RoleResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var roleID string
	roleID = data.ID.ValueString()

	request := operations.GetRoleRequest{
		RoleID: roleID,
	}
	res, err := r.client.Roles.GetRole(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Role != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedRole(res.Role)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *RoleResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *RoleResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	rolePayload := data.ToSharedRolePayload()
	var roleID string
	roleID = data.ID.ValueString()

	request := operations.PutRoleRequest{
		RolePayload: rolePayload,
		RoleID:      roleID,
	}
	res, err := r.client.Roles.PutRole(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Role != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedRole(res.Role)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var roleId1 string
	roleId1 = data.ID.ValueString()

	request1 := operations.GetRoleRequest{
		RoleID: roleId1,
	}
	res1, err := r.client.Roles.GetRole(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.Role != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromSharedRole(res1.Role)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *RoleResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *RoleResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var roleID string
	roleID = data.ID.ValueString()

	request := operations.DeleteRoleRequest{
		RoleID: roleID,
	}
	res, err := r.client.Roles.DeleteRole(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *RoleResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), req.ID)...)
}
