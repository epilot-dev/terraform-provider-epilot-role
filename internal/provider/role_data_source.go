// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-role/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-role/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &RoleDataSource{}
var _ datasource.DataSourceWithConfigure = &RoleDataSource{}

func NewRoleDataSource() datasource.DataSource {
	return &RoleDataSource{}
}

// RoleDataSource is the data source implementation.
type RoleDataSource struct {
	// Provider configured SDK client.
	client *sdk.SDK
}

// RoleDataSourceModel describes the data model.
type RoleDataSourceModel struct {
	ID             types.String     `tfsdk:"id"`
	Name           types.String     `tfsdk:"name"`
	OrganizationID types.String     `tfsdk:"organization_id"`
	Schemas        *tfTypes.Schemas `queryParam:"inline" tfsdk:"schemas" tfPlanOnly:"true"`
	Slug           types.String     `tfsdk:"slug"`
}

// Metadata returns the data source type name.
func (r *RoleDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_role"
}

// Schema defines the schema for the data source.
func (r *RoleDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Role DataSource",

		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `Format: <organization_id>:<slug>`,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Description: `Human-friendly name for the role`,
			},
			"organization_id": schema.StringAttribute{
				Computed:    true,
				Description: `Id of an organization`,
			},
			"schemas": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"expires_at": schema.StringAttribute{
						Computed:    true,
						Description: `date and time then the role will expire`,
					},
					"grants": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"action": schema.StringAttribute{
									Computed: true,
								},
								"conditions": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"equals_condition": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"attribute": schema.StringAttribute{
														Computed: true,
													},
													"operation": schema.StringAttribute{
														Computed: true,
													},
													"values": schema.ListAttribute{
														Computed:    true,
														ElementType: types.StringType,
													},
												},
												Description: `Check if attribute equals to any of the values`,
											},
										},
									},
								},
								"effect": schema.StringAttribute{
									Computed: true,
								},
								"resource": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						Description: `List of grants (permissions) applied to the role`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Description: `Format: <organization_id>:<slug>`,
					},
					"name": schema.StringAttribute{
						Computed:    true,
						Description: `Human-friendly name for the role`,
					},
					"organization_id": schema.StringAttribute{
						Computed:    true,
						Description: `Id of an organization`,
					},
					"partner_org_id": schema.StringAttribute{
						Computed: true,
					},
					"pricing_tier": schema.StringAttribute{
						Computed:    true,
						Description: `The pricing tier of the organization this root role is based on`,
					},
					"slug": schema.StringAttribute{
						Computed:    true,
						Description: `URL-friendly name for the role`,
					},
					"type": schema.StringAttribute{
						Computed: true,
					},
				},
				Description: `A role that is applied to end customers and installers using the Portals`,
			},
			"slug": schema.StringAttribute{
				Computed:    true,
				Description: `URL-friendly name for the role`,
			},
		},
	}
}

func (r *RoleDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *RoleDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *RoleDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetRoleRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Roles.GetRole(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Role != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedRole(ctx, res.Role)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
