// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/epilot-dev/terraform-provider-epilot-role/internal/provider/typeconvert"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-role/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-role/internal/sdk/models/operations"
	"github.com/epilot-dev/terraform-provider-epilot-role/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *RoleDataSourceModel) ToOperationsGetRoleRequest(ctx context.Context) (*operations.GetRoleRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var roleID string
	roleID = r.ID.ValueString()

	out := operations.GetRoleRequest{
		RoleID: roleID,
	}

	return &out, diags
}

func (r *RoleDataSourceModel) RefreshFromSharedRole(ctx context.Context, resp *shared.Role) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.UserRoleSchemas != nil {
			r.Schemas = &tfTypes.Schemas{}
			r.Schemas.ExpiresAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UserRoleSchemas.ExpiresAt))
			r.Schemas.Grants = []tfTypes.Grant{}
			if len(r.Schemas.Grants) > len(resp.UserRoleSchemas.Grants) {
				r.Schemas.Grants = r.Schemas.Grants[:len(resp.UserRoleSchemas.Grants)]
			}
			for grantsCount, grantsItem := range resp.UserRoleSchemas.Grants {
				var grants tfTypes.Grant
				grants.Action = types.StringValue(grantsItem.Action)
				grants.Conditions = []tfTypes.GrantCondition{}
				for conditionsCount, conditionsItem := range grantsItem.Conditions {
					var conditions tfTypes.GrantCondition
					if conditionsItem.EqualsCondition != nil {
						conditions.EqualsCondition = &tfTypes.EqualsCondition{}
						conditions.EqualsCondition.Attribute = types.StringValue(conditionsItem.EqualsCondition.Attribute)
						conditions.EqualsCondition.Operation = types.StringValue(string(conditionsItem.EqualsCondition.Operation))
						conditions.EqualsCondition.Values = nil
						for _, valuesItem := range conditionsItem.EqualsCondition.Values {
							var values types.String
							valuesResult, _ := json.Marshal(valuesItem)
							values = types.StringValue(string(valuesResult))
							conditions.EqualsCondition.Values = append(conditions.EqualsCondition.Values, values)
						}
					}
					if conditionsCount+1 > len(grants.Conditions) {
						grants.Conditions = append(grants.Conditions, conditions)
					} else {
						grants.Conditions[conditionsCount].EqualsCondition = conditions.EqualsCondition
					}
				}
				if grantsItem.Effect != nil {
					grants.Effect = types.StringValue(string(*grantsItem.Effect))
				} else {
					grants.Effect = types.StringNull()
				}
				grants.Resource = types.StringPointerValue(grantsItem.Resource)
				if grantsCount+1 > len(r.Schemas.Grants) {
					r.Schemas.Grants = append(r.Schemas.Grants, grants)
				} else {
					r.Schemas.Grants[grantsCount].Action = grants.Action
					r.Schemas.Grants[grantsCount].Conditions = grants.Conditions
					r.Schemas.Grants[grantsCount].Effect = grants.Effect
					r.Schemas.Grants[grantsCount].Resource = grants.Resource
				}
			}
			r.Schemas.ID = types.StringValue(resp.UserRoleSchemas.ID)
			r.ID = r.Schemas.ID
			r.Schemas.Name = types.StringValue(resp.UserRoleSchemas.Name)
			r.Name = r.Schemas.Name
			r.Schemas.OrganizationID = types.StringValue(resp.UserRoleSchemas.OrganizationID)
			r.OrganizationID = r.Schemas.OrganizationID
			r.Schemas.Slug = types.StringValue(resp.UserRoleSchemas.Slug)
			r.Slug = r.Schemas.Slug
			r.Schemas.Type = types.StringValue(string(resp.UserRoleSchemas.Type))
		}
	}

	return diags
}
