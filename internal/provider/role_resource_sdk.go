// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-role/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-role/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *RoleResourceModel) ToSharedCreateRolePayload() *shared.CreateRolePayload {
	expiresAt := new(time.Time)
	if !r.ExpiresAt.IsUnknown() && !r.ExpiresAt.IsNull() {
		*expiresAt, _ = time.Parse(time.RFC3339Nano, r.ExpiresAt.ValueString())
	} else {
		expiresAt = nil
	}
	var grants []shared.GrantWithDependencies = []shared.GrantWithDependencies{}
	for _, grantsItem := range r.Grants {
		var action string
		action = grantsItem.Action.ValueString()

		var conditions []shared.GrantCondition = []shared.GrantCondition{}
		for _, conditionsItem := range grantsItem.Conditions {
			if conditionsItem.EqualsCondition != nil {
				var attribute string
				attribute = conditionsItem.EqualsCondition.Attribute.ValueString()

				operation := shared.Operation(conditionsItem.EqualsCondition.Operation.ValueString())
				var values []interface{} = []interface{}{}
				for _, valuesItem := range conditionsItem.EqualsCondition.Values {
					var valuesTmp interface{}
					_ = json.Unmarshal([]byte(valuesItem.ValueString()), &valuesTmp)
					values = append(values, valuesTmp)
				}
				equalsCondition := shared.EqualsCondition{
					Attribute: attribute,
					Operation: operation,
					Values:    values,
				}
				conditions = append(conditions, shared.GrantCondition{
					EqualsCondition: &equalsCondition,
				})
			}
		}
		var dependencies interface{}
		if !grantsItem.Dependencies.IsUnknown() && !grantsItem.Dependencies.IsNull() {
			_ = json.Unmarshal([]byte(grantsItem.Dependencies.ValueString()), &dependencies)
		}
		effect := new(shared.GrantWithDependenciesEffect)
		if !grantsItem.Effect.IsUnknown() && !grantsItem.Effect.IsNull() {
			*effect = shared.GrantWithDependenciesEffect(grantsItem.Effect.ValueString())
		} else {
			effect = nil
		}
		resource := new(string)
		if !grantsItem.Resource.IsUnknown() && !grantsItem.Resource.IsNull() {
			*resource = grantsItem.Resource.ValueString()
		} else {
			resource = nil
		}
		grants = append(grants, shared.GrantWithDependencies{
			Action:       action,
			Conditions:   conditions,
			Dependencies: dependencies,
			Effect:       effect,
			Resource:     resource,
		})
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	var name string
	name = r.Name.ValueString()

	organizationID := new(string)
	if !r.OrganizationID.IsUnknown() && !r.OrganizationID.IsNull() {
		*organizationID = r.OrganizationID.ValueString()
	} else {
		organizationID = nil
	}
	partnerOrgID := new(string)
	if !r.PartnerOrgID.IsUnknown() && !r.PartnerOrgID.IsNull() {
		*partnerOrgID = r.PartnerOrgID.ValueString()
	} else {
		partnerOrgID = nil
	}
	pricingTier := new(string)
	if !r.PricingTier.IsUnknown() && !r.PricingTier.IsNull() {
		*pricingTier = r.PricingTier.ValueString()
	} else {
		pricingTier = nil
	}
	var slug string
	slug = r.Slug.ValueString()

	typeVar := shared.Type(r.Type.ValueString())
	out := shared.CreateRolePayload{
		ExpiresAt:      expiresAt,
		Grants:         grants,
		ID:             id,
		Name:           name,
		OrganizationID: organizationID,
		PartnerOrgID:   partnerOrgID,
		PricingTier:    pricingTier,
		Slug:           slug,
		Type:           typeVar,
	}
	return &out
}

func (r *RoleResourceModel) RefreshFromSharedRole(resp *shared.Role) {
	if resp != nil {
		if resp.ExpiresAt != nil {
			r.ExpiresAt = types.StringValue(resp.ExpiresAt.Format(time.RFC3339Nano))
		} else {
			r.ExpiresAt = types.StringNull()
		}
		r.Grants = []tfTypes.Grant{}
		if len(r.Grants) > len(resp.Grants) {
			r.Grants = r.Grants[:len(resp.Grants)]
		}
		for grantsCount, grantsItem := range resp.Grants {
			var grants1 tfTypes.Grant
			grants1.Action = types.StringValue(grantsItem.Action)
			grants1.Conditions = []tfTypes.GrantCondition{}
			for conditionsCount, conditionsItem := range grantsItem.Conditions {
				var conditions1 tfTypes.GrantCondition
				if conditionsItem.EqualsCondition != nil {
					conditions1.EqualsCondition = &tfTypes.EqualsCondition{}
					conditions1.EqualsCondition.Attribute = types.StringValue(conditionsItem.EqualsCondition.Attribute)
					conditions1.EqualsCondition.Operation = types.StringValue(string(conditionsItem.EqualsCondition.Operation))
					conditions1.EqualsCondition.Values = nil
					for _, valuesItem := range conditionsItem.EqualsCondition.Values {
						var values1 types.String
						values1Result, _ := json.Marshal(valuesItem)
						values1 = types.StringValue(string(values1Result))
						conditions1.EqualsCondition.Values = append(conditions1.EqualsCondition.Values, values1)
					}
				}
				if conditionsCount+1 > len(grants1.Conditions) {
					grants1.Conditions = append(grants1.Conditions, conditions1)
				} else {
					grants1.Conditions[conditionsCount].EqualsCondition = conditions1.EqualsCondition
				}
			}
			if grantsItem.Effect != nil {
				grants1.Effect = types.StringValue(string(*grantsItem.Effect))
			} else {
				grants1.Effect = types.StringNull()
			}
			grants1.Resource = types.StringPointerValue(grantsItem.Resource)
			if grantsCount+1 > len(r.Grants) {
				r.Grants = append(r.Grants, grants1)
			} else {
				r.Grants[grantsCount].Action = grants1.Action
				r.Grants[grantsCount].Conditions = grants1.Conditions
				r.Grants[grantsCount].Effect = grants1.Effect
				r.Grants[grantsCount].Resource = grants1.Resource
			}
		}
		r.ID = types.StringValue(resp.ID)
		r.Name = types.StringValue(resp.Name)
		r.OrganizationID = types.StringValue(resp.OrganizationID)
		r.PartnerOrgID = types.StringPointerValue(resp.PartnerOrgID)
		r.PricingTier = types.StringPointerValue(resp.PricingTier)
		r.Slug = types.StringValue(resp.Slug)
		r.Type = types.StringValue(string(resp.Type))
	}
}

func (r *RoleResourceModel) ToSharedRolePayload() *shared.RolePayload {
	expiresAt := new(time.Time)
	if !r.ExpiresAt.IsUnknown() && !r.ExpiresAt.IsNull() {
		*expiresAt, _ = time.Parse(time.RFC3339Nano, r.ExpiresAt.ValueString())
	} else {
		expiresAt = nil
	}
	var grants []shared.GrantWithDependencies = []shared.GrantWithDependencies{}
	for _, grantsItem := range r.Grants {
		var action string
		action = grantsItem.Action.ValueString()

		var conditions []shared.GrantCondition = []shared.GrantCondition{}
		for _, conditionsItem := range grantsItem.Conditions {
			if conditionsItem.EqualsCondition != nil {
				var attribute string
				attribute = conditionsItem.EqualsCondition.Attribute.ValueString()

				operation := shared.Operation(conditionsItem.EqualsCondition.Operation.ValueString())
				var values []interface{} = []interface{}{}
				for _, valuesItem := range conditionsItem.EqualsCondition.Values {
					var valuesTmp interface{}
					_ = json.Unmarshal([]byte(valuesItem.ValueString()), &valuesTmp)
					values = append(values, valuesTmp)
				}
				equalsCondition := shared.EqualsCondition{
					Attribute: attribute,
					Operation: operation,
					Values:    values,
				}
				conditions = append(conditions, shared.GrantCondition{
					EqualsCondition: &equalsCondition,
				})
			}
		}
		var dependencies interface{}
		if !grantsItem.Dependencies.IsUnknown() && !grantsItem.Dependencies.IsNull() {
			_ = json.Unmarshal([]byte(grantsItem.Dependencies.ValueString()), &dependencies)
		}
		effect := new(shared.GrantWithDependenciesEffect)
		if !grantsItem.Effect.IsUnknown() && !grantsItem.Effect.IsNull() {
			*effect = shared.GrantWithDependenciesEffect(grantsItem.Effect.ValueString())
		} else {
			effect = nil
		}
		resource := new(string)
		if !grantsItem.Resource.IsUnknown() && !grantsItem.Resource.IsNull() {
			*resource = grantsItem.Resource.ValueString()
		} else {
			resource = nil
		}
		grants = append(grants, shared.GrantWithDependencies{
			Action:       action,
			Conditions:   conditions,
			Dependencies: dependencies,
			Effect:       effect,
			Resource:     resource,
		})
	}
	var id string
	id = r.ID.ValueString()

	var name string
	name = r.Name.ValueString()

	var organizationID string
	organizationID = r.OrganizationID.ValueString()

	partnerOrgID := new(string)
	if !r.PartnerOrgID.IsUnknown() && !r.PartnerOrgID.IsNull() {
		*partnerOrgID = r.PartnerOrgID.ValueString()
	} else {
		partnerOrgID = nil
	}
	pricingTier := new(string)
	if !r.PricingTier.IsUnknown() && !r.PricingTier.IsNull() {
		*pricingTier = r.PricingTier.ValueString()
	} else {
		pricingTier = nil
	}
	var slug string
	slug = r.Slug.ValueString()

	typeVar := shared.RolePayloadType(r.Type.ValueString())
	out := shared.RolePayload{
		ExpiresAt:      expiresAt,
		Grants:         grants,
		ID:             id,
		Name:           name,
		OrganizationID: organizationID,
		PartnerOrgID:   partnerOrgID,
		PricingTier:    pricingTier,
		Slug:           slug,
		Type:           typeVar,
	}
	return &out
}
