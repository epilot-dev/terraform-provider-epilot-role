// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/epilot-dev/terraform-provider-epilot-role/internal/provider/typeconvert"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-role/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-role/internal/sdk/models/operations"
	"github.com/epilot-dev/terraform-provider-epilot-role/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *RoleResourceModel) ToSharedRolePayload(ctx context.Context) (*shared.RolePayload, diag.Diagnostics) {
	var diags diag.Diagnostics

	var out shared.RolePayload
	var userRoleSchemas1 *shared.UserRoleSchemas1
	if r.Schemas != nil {
		expiresAt := new(time.Time)
		if !r.Schemas.ExpiresAt.IsUnknown() && !r.Schemas.ExpiresAt.IsNull() {
			*expiresAt, _ = time.Parse(time.RFC3339Nano, r.Schemas.ExpiresAt.ValueString())
		} else {
			expiresAt = nil
		}
		grants := make([]shared.GrantWithDependencies, 0, len(r.Schemas.Grants))
		for _, grantsItem := range r.Schemas.Grants {
			var action string
			action = grantsItem.Action.ValueString()

			conditions := make([]shared.GrantCondition, 0, len(grantsItem.Conditions))
			for _, conditionsItem := range grantsItem.Conditions {
				if conditionsItem.EqualsCondition != nil {
					var attribute string
					attribute = conditionsItem.EqualsCondition.Attribute.ValueString()

					operation := shared.Operation(conditionsItem.EqualsCondition.Operation.ValueString())
					values := make([]interface{}, 0, len(conditionsItem.EqualsCondition.Values))
					for _, valuesItem := range conditionsItem.EqualsCondition.Values {
						var valuesTmp interface{}
						_ = json.Unmarshal([]byte(valuesItem.ValueString()), &valuesTmp)
						values = append(values, valuesTmp)
					}
					equalsCondition := shared.EqualsCondition{
						Attribute: attribute,
						Operation: operation,
						Values:    values,
					}
					conditions = append(conditions, shared.GrantCondition{
						EqualsCondition: &equalsCondition,
					})
				}
			}
			dependencies := make([]shared.Grant, 0, len(grantsItem.Dependencies))
			for _, dependenciesItem := range grantsItem.Dependencies {
				var action1 string
				action1 = dependenciesItem.Action.ValueString()

				conditions1 := make([]shared.GrantCondition, 0, len(dependenciesItem.Conditions))
				for _, conditionsItem1 := range dependenciesItem.Conditions {
					if conditionsItem1.EqualsCondition != nil {
						var attribute1 string
						attribute1 = conditionsItem1.EqualsCondition.Attribute.ValueString()

						operation1 := shared.Operation(conditionsItem1.EqualsCondition.Operation.ValueString())
						values1 := make([]interface{}, 0, len(conditionsItem1.EqualsCondition.Values))
						for _, valuesItem1 := range conditionsItem1.EqualsCondition.Values {
							var valuesTmp1 interface{}
							_ = json.Unmarshal([]byte(valuesItem1.ValueString()), &valuesTmp1)
							values1 = append(values1, valuesTmp1)
						}
						equalsCondition1 := shared.EqualsCondition{
							Attribute: attribute1,
							Operation: operation1,
							Values:    values1,
						}
						conditions1 = append(conditions1, shared.GrantCondition{
							EqualsCondition: &equalsCondition1,
						})
					}
				}
				effect := new(shared.Effect)
				if !dependenciesItem.Effect.IsUnknown() && !dependenciesItem.Effect.IsNull() {
					*effect = shared.Effect(dependenciesItem.Effect.ValueString())
				} else {
					effect = nil
				}
				resource := new(string)
				if !dependenciesItem.Resource.IsUnknown() && !dependenciesItem.Resource.IsNull() {
					*resource = dependenciesItem.Resource.ValueString()
				} else {
					resource = nil
				}
				dependencies = append(dependencies, shared.Grant{
					Action:     action1,
					Conditions: conditions1,
					Effect:     effect,
					Resource:   resource,
				})
			}
			effect1 := new(shared.GrantWithDependenciesEffect)
			if !grantsItem.Effect.IsUnknown() && !grantsItem.Effect.IsNull() {
				*effect1 = shared.GrantWithDependenciesEffect(grantsItem.Effect.ValueString())
			} else {
				effect1 = nil
			}
			resource1 := new(string)
			if !grantsItem.Resource.IsUnknown() && !grantsItem.Resource.IsNull() {
				*resource1 = grantsItem.Resource.ValueString()
			} else {
				resource1 = nil
			}
			grants = append(grants, shared.GrantWithDependencies{
				Action:       action,
				Conditions:   conditions,
				Dependencies: dependencies,
				Effect:       effect1,
				Resource:     resource1,
			})
		}
		var id string
		id = r.Schemas.ID.ValueString()

		var name string
		name = r.Schemas.Name.ValueString()

		var organizationID string
		organizationID = r.Schemas.OrganizationID.ValueString()

		var slug string
		slug = r.Schemas.Slug.ValueString()

		typeVar := shared.SchemasUserRoleType(r.Schemas.Type.ValueString())
		userRoleSchemas1 = &shared.UserRoleSchemas1{
			ExpiresAt:      expiresAt,
			Grants:         grants,
			ID:             id,
			Name:           name,
			OrganizationID: organizationID,
			Slug:           slug,
			Type:           typeVar,
		}
	}
	if userRoleSchemas1 != nil {
		out = shared.RolePayload{
			UserRoleSchemas1: userRoleSchemas1,
		}
	}
	var orgRoleSchemas *shared.OrgRoleSchemas
	if r.Schemas != nil {
		expiresAt1 := new(time.Time)
		if !r.Schemas.ExpiresAt.IsUnknown() && !r.Schemas.ExpiresAt.IsNull() {
			*expiresAt1, _ = time.Parse(time.RFC3339Nano, r.Schemas.ExpiresAt.ValueString())
		} else {
			expiresAt1 = nil
		}
		grants1 := make([]shared.GrantWithDependencies, 0, len(r.Schemas.Grants))
		for _, grantsItem1 := range r.Schemas.Grants {
			var action2 string
			action2 = grantsItem1.Action.ValueString()

			conditions2 := make([]shared.GrantCondition, 0, len(grantsItem1.Conditions))
			for _, conditionsItem2 := range grantsItem1.Conditions {
				if conditionsItem2.EqualsCondition != nil {
					var attribute2 string
					attribute2 = conditionsItem2.EqualsCondition.Attribute.ValueString()

					operation2 := shared.Operation(conditionsItem2.EqualsCondition.Operation.ValueString())
					values2 := make([]interface{}, 0, len(conditionsItem2.EqualsCondition.Values))
					for _, valuesItem2 := range conditionsItem2.EqualsCondition.Values {
						var valuesTmp2 interface{}
						_ = json.Unmarshal([]byte(valuesItem2.ValueString()), &valuesTmp2)
						values2 = append(values2, valuesTmp2)
					}
					equalsCondition2 := shared.EqualsCondition{
						Attribute: attribute2,
						Operation: operation2,
						Values:    values2,
					}
					conditions2 = append(conditions2, shared.GrantCondition{
						EqualsCondition: &equalsCondition2,
					})
				}
			}
			dependencies1 := make([]shared.Grant, 0, len(grantsItem1.Dependencies))
			for _, dependenciesItem1 := range grantsItem1.Dependencies {
				var action3 string
				action3 = dependenciesItem1.Action.ValueString()

				conditions3 := make([]shared.GrantCondition, 0, len(dependenciesItem1.Conditions))
				for _, conditionsItem3 := range dependenciesItem1.Conditions {
					if conditionsItem3.EqualsCondition != nil {
						var attribute3 string
						attribute3 = conditionsItem3.EqualsCondition.Attribute.ValueString()

						operation3 := shared.Operation(conditionsItem3.EqualsCondition.Operation.ValueString())
						values3 := make([]interface{}, 0, len(conditionsItem3.EqualsCondition.Values))
						for _, valuesItem3 := range conditionsItem3.EqualsCondition.Values {
							var valuesTmp3 interface{}
							_ = json.Unmarshal([]byte(valuesItem3.ValueString()), &valuesTmp3)
							values3 = append(values3, valuesTmp3)
						}
						equalsCondition3 := shared.EqualsCondition{
							Attribute: attribute3,
							Operation: operation3,
							Values:    values3,
						}
						conditions3 = append(conditions3, shared.GrantCondition{
							EqualsCondition: &equalsCondition3,
						})
					}
				}
				effect2 := new(shared.Effect)
				if !dependenciesItem1.Effect.IsUnknown() && !dependenciesItem1.Effect.IsNull() {
					*effect2 = shared.Effect(dependenciesItem1.Effect.ValueString())
				} else {
					effect2 = nil
				}
				resource2 := new(string)
				if !dependenciesItem1.Resource.IsUnknown() && !dependenciesItem1.Resource.IsNull() {
					*resource2 = dependenciesItem1.Resource.ValueString()
				} else {
					resource2 = nil
				}
				dependencies1 = append(dependencies1, shared.Grant{
					Action:     action3,
					Conditions: conditions3,
					Effect:     effect2,
					Resource:   resource2,
				})
			}
			effect3 := new(shared.GrantWithDependenciesEffect)
			if !grantsItem1.Effect.IsUnknown() && !grantsItem1.Effect.IsNull() {
				*effect3 = shared.GrantWithDependenciesEffect(grantsItem1.Effect.ValueString())
			} else {
				effect3 = nil
			}
			resource3 := new(string)
			if !grantsItem1.Resource.IsUnknown() && !grantsItem1.Resource.IsNull() {
				*resource3 = grantsItem1.Resource.ValueString()
			} else {
				resource3 = nil
			}
			grants1 = append(grants1, shared.GrantWithDependencies{
				Action:       action2,
				Conditions:   conditions2,
				Dependencies: dependencies1,
				Effect:       effect3,
				Resource:     resource3,
			})
		}
		var id1 string
		id1 = r.Schemas.ID.ValueString()

		var name1 string
		name1 = r.Schemas.Name.ValueString()

		var organizationId1 string
		organizationId1 = r.Schemas.OrganizationID.ValueString()

		pricingTier := new(string)
		if !r.Schemas.PricingTier.IsUnknown() && !r.Schemas.PricingTier.IsNull() {
			*pricingTier = r.Schemas.PricingTier.ValueString()
		} else {
			pricingTier = nil
		}
		var slug1 string
		slug1 = r.Schemas.Slug.ValueString()

		typeVar1 := shared.Type(r.Schemas.Type.ValueString())
		orgRoleSchemas = &shared.OrgRoleSchemas{
			ExpiresAt:      expiresAt1,
			Grants:         grants1,
			ID:             id1,
			Name:           name1,
			OrganizationID: organizationId1,
			PricingTier:    pricingTier,
			Slug:           slug1,
			Type:           typeVar1,
		}
	}
	if orgRoleSchemas != nil {
		out = shared.RolePayload{
			OrgRoleSchemas: orgRoleSchemas,
		}
	}
	var shareRoleSchemas1 *shared.ShareRoleSchemas1
	if r.Schemas != nil {
		expiresAt2 := new(time.Time)
		if !r.Schemas.ExpiresAt.IsUnknown() && !r.Schemas.ExpiresAt.IsNull() {
			*expiresAt2, _ = time.Parse(time.RFC3339Nano, r.Schemas.ExpiresAt.ValueString())
		} else {
			expiresAt2 = nil
		}
		grants2 := make([]shared.GrantWithDependencies, 0, len(r.Schemas.Grants))
		for _, grantsItem2 := range r.Schemas.Grants {
			var action4 string
			action4 = grantsItem2.Action.ValueString()

			conditions4 := make([]shared.GrantCondition, 0, len(grantsItem2.Conditions))
			for _, conditionsItem4 := range grantsItem2.Conditions {
				if conditionsItem4.EqualsCondition != nil {
					var attribute4 string
					attribute4 = conditionsItem4.EqualsCondition.Attribute.ValueString()

					operation4 := shared.Operation(conditionsItem4.EqualsCondition.Operation.ValueString())
					values4 := make([]interface{}, 0, len(conditionsItem4.EqualsCondition.Values))
					for _, valuesItem4 := range conditionsItem4.EqualsCondition.Values {
						var valuesTmp4 interface{}
						_ = json.Unmarshal([]byte(valuesItem4.ValueString()), &valuesTmp4)
						values4 = append(values4, valuesTmp4)
					}
					equalsCondition4 := shared.EqualsCondition{
						Attribute: attribute4,
						Operation: operation4,
						Values:    values4,
					}
					conditions4 = append(conditions4, shared.GrantCondition{
						EqualsCondition: &equalsCondition4,
					})
				}
			}
			dependencies2 := make([]shared.Grant, 0, len(grantsItem2.Dependencies))
			for _, dependenciesItem2 := range grantsItem2.Dependencies {
				var action5 string
				action5 = dependenciesItem2.Action.ValueString()

				conditions5 := make([]shared.GrantCondition, 0, len(dependenciesItem2.Conditions))
				for _, conditionsItem5 := range dependenciesItem2.Conditions {
					if conditionsItem5.EqualsCondition != nil {
						var attribute5 string
						attribute5 = conditionsItem5.EqualsCondition.Attribute.ValueString()

						operation5 := shared.Operation(conditionsItem5.EqualsCondition.Operation.ValueString())
						values5 := make([]interface{}, 0, len(conditionsItem5.EqualsCondition.Values))
						for _, valuesItem5 := range conditionsItem5.EqualsCondition.Values {
							var valuesTmp5 interface{}
							_ = json.Unmarshal([]byte(valuesItem5.ValueString()), &valuesTmp5)
							values5 = append(values5, valuesTmp5)
						}
						equalsCondition5 := shared.EqualsCondition{
							Attribute: attribute5,
							Operation: operation5,
							Values:    values5,
						}
						conditions5 = append(conditions5, shared.GrantCondition{
							EqualsCondition: &equalsCondition5,
						})
					}
				}
				effect4 := new(shared.Effect)
				if !dependenciesItem2.Effect.IsUnknown() && !dependenciesItem2.Effect.IsNull() {
					*effect4 = shared.Effect(dependenciesItem2.Effect.ValueString())
				} else {
					effect4 = nil
				}
				resource4 := new(string)
				if !dependenciesItem2.Resource.IsUnknown() && !dependenciesItem2.Resource.IsNull() {
					*resource4 = dependenciesItem2.Resource.ValueString()
				} else {
					resource4 = nil
				}
				dependencies2 = append(dependencies2, shared.Grant{
					Action:     action5,
					Conditions: conditions5,
					Effect:     effect4,
					Resource:   resource4,
				})
			}
			effect5 := new(shared.GrantWithDependenciesEffect)
			if !grantsItem2.Effect.IsUnknown() && !grantsItem2.Effect.IsNull() {
				*effect5 = shared.GrantWithDependenciesEffect(grantsItem2.Effect.ValueString())
			} else {
				effect5 = nil
			}
			resource5 := new(string)
			if !grantsItem2.Resource.IsUnknown() && !grantsItem2.Resource.IsNull() {
				*resource5 = grantsItem2.Resource.ValueString()
			} else {
				resource5 = nil
			}
			grants2 = append(grants2, shared.GrantWithDependencies{
				Action:       action4,
				Conditions:   conditions4,
				Dependencies: dependencies2,
				Effect:       effect5,
				Resource:     resource5,
			})
		}
		var id2 string
		id2 = r.Schemas.ID.ValueString()

		var name2 string
		name2 = r.Schemas.Name.ValueString()

		var organizationId2 string
		organizationId2 = r.Schemas.OrganizationID.ValueString()

		var slug2 string
		slug2 = r.Schemas.Slug.ValueString()

		typeVar2 := shared.SchemasShareRoleType(r.Schemas.Type.ValueString())
		shareRoleSchemas1 = &shared.ShareRoleSchemas1{
			ExpiresAt:      expiresAt2,
			Grants:         grants2,
			ID:             id2,
			Name:           name2,
			OrganizationID: organizationId2,
			Slug:           slug2,
			Type:           typeVar2,
		}
	}
	if shareRoleSchemas1 != nil {
		out = shared.RolePayload{
			ShareRoleSchemas1: shareRoleSchemas1,
		}
	}
	var partnerRoleSchemas1 *shared.PartnerRoleSchemas1
	if r.Schemas != nil {
		expiresAt3 := new(time.Time)
		if !r.Schemas.ExpiresAt.IsUnknown() && !r.Schemas.ExpiresAt.IsNull() {
			*expiresAt3, _ = time.Parse(time.RFC3339Nano, r.Schemas.ExpiresAt.ValueString())
		} else {
			expiresAt3 = nil
		}
		grants3 := make([]shared.GrantWithDependencies, 0, len(r.Schemas.Grants))
		for _, grantsItem3 := range r.Schemas.Grants {
			var action6 string
			action6 = grantsItem3.Action.ValueString()

			conditions6 := make([]shared.GrantCondition, 0, len(grantsItem3.Conditions))
			for _, conditionsItem6 := range grantsItem3.Conditions {
				if conditionsItem6.EqualsCondition != nil {
					var attribute6 string
					attribute6 = conditionsItem6.EqualsCondition.Attribute.ValueString()

					operation6 := shared.Operation(conditionsItem6.EqualsCondition.Operation.ValueString())
					values6 := make([]interface{}, 0, len(conditionsItem6.EqualsCondition.Values))
					for _, valuesItem6 := range conditionsItem6.EqualsCondition.Values {
						var valuesTmp6 interface{}
						_ = json.Unmarshal([]byte(valuesItem6.ValueString()), &valuesTmp6)
						values6 = append(values6, valuesTmp6)
					}
					equalsCondition6 := shared.EqualsCondition{
						Attribute: attribute6,
						Operation: operation6,
						Values:    values6,
					}
					conditions6 = append(conditions6, shared.GrantCondition{
						EqualsCondition: &equalsCondition6,
					})
				}
			}
			dependencies3 := make([]shared.Grant, 0, len(grantsItem3.Dependencies))
			for _, dependenciesItem3 := range grantsItem3.Dependencies {
				var action7 string
				action7 = dependenciesItem3.Action.ValueString()

				conditions7 := make([]shared.GrantCondition, 0, len(dependenciesItem3.Conditions))
				for _, conditionsItem7 := range dependenciesItem3.Conditions {
					if conditionsItem7.EqualsCondition != nil {
						var attribute7 string
						attribute7 = conditionsItem7.EqualsCondition.Attribute.ValueString()

						operation7 := shared.Operation(conditionsItem7.EqualsCondition.Operation.ValueString())
						values7 := make([]interface{}, 0, len(conditionsItem7.EqualsCondition.Values))
						for _, valuesItem7 := range conditionsItem7.EqualsCondition.Values {
							var valuesTmp7 interface{}
							_ = json.Unmarshal([]byte(valuesItem7.ValueString()), &valuesTmp7)
							values7 = append(values7, valuesTmp7)
						}
						equalsCondition7 := shared.EqualsCondition{
							Attribute: attribute7,
							Operation: operation7,
							Values:    values7,
						}
						conditions7 = append(conditions7, shared.GrantCondition{
							EqualsCondition: &equalsCondition7,
						})
					}
				}
				effect6 := new(shared.Effect)
				if !dependenciesItem3.Effect.IsUnknown() && !dependenciesItem3.Effect.IsNull() {
					*effect6 = shared.Effect(dependenciesItem3.Effect.ValueString())
				} else {
					effect6 = nil
				}
				resource6 := new(string)
				if !dependenciesItem3.Resource.IsUnknown() && !dependenciesItem3.Resource.IsNull() {
					*resource6 = dependenciesItem3.Resource.ValueString()
				} else {
					resource6 = nil
				}
				dependencies3 = append(dependencies3, shared.Grant{
					Action:     action7,
					Conditions: conditions7,
					Effect:     effect6,
					Resource:   resource6,
				})
			}
			effect7 := new(shared.GrantWithDependenciesEffect)
			if !grantsItem3.Effect.IsUnknown() && !grantsItem3.Effect.IsNull() {
				*effect7 = shared.GrantWithDependenciesEffect(grantsItem3.Effect.ValueString())
			} else {
				effect7 = nil
			}
			resource7 := new(string)
			if !grantsItem3.Resource.IsUnknown() && !grantsItem3.Resource.IsNull() {
				*resource7 = grantsItem3.Resource.ValueString()
			} else {
				resource7 = nil
			}
			grants3 = append(grants3, shared.GrantWithDependencies{
				Action:       action6,
				Conditions:   conditions6,
				Dependencies: dependencies3,
				Effect:       effect7,
				Resource:     resource7,
			})
		}
		var id3 string
		id3 = r.Schemas.ID.ValueString()

		var name3 string
		name3 = r.Schemas.Name.ValueString()

		var organizationId3 string
		organizationId3 = r.Schemas.OrganizationID.ValueString()

		partnerOrgID := new(string)
		if !r.Schemas.PartnerOrgID.IsUnknown() && !r.Schemas.PartnerOrgID.IsNull() {
			*partnerOrgID = r.Schemas.PartnerOrgID.ValueString()
		} else {
			partnerOrgID = nil
		}
		var slug3 string
		slug3 = r.Schemas.Slug.ValueString()

		typeVar3 := shared.SchemasType(r.Schemas.Type.ValueString())
		partnerRoleSchemas1 = &shared.PartnerRoleSchemas1{
			ExpiresAt:      expiresAt3,
			Grants:         grants3,
			ID:             id3,
			Name:           name3,
			OrganizationID: organizationId3,
			PartnerOrgID:   partnerOrgID,
			Slug:           slug3,
			Type:           typeVar3,
		}
	}
	if partnerRoleSchemas1 != nil {
		out = shared.RolePayload{
			PartnerRoleSchemas1: partnerRoleSchemas1,
		}
	}
	var portalRoleSchemas1 *shared.PortalRoleSchemas1
	if r.Schemas != nil {
		expiresAt4 := new(time.Time)
		if !r.Schemas.ExpiresAt.IsUnknown() && !r.Schemas.ExpiresAt.IsNull() {
			*expiresAt4, _ = time.Parse(time.RFC3339Nano, r.Schemas.ExpiresAt.ValueString())
		} else {
			expiresAt4 = nil
		}
		grants4 := make([]shared.GrantWithDependencies, 0, len(r.Schemas.Grants))
		for _, grantsItem4 := range r.Schemas.Grants {
			var action8 string
			action8 = grantsItem4.Action.ValueString()

			conditions8 := make([]shared.GrantCondition, 0, len(grantsItem4.Conditions))
			for _, conditionsItem8 := range grantsItem4.Conditions {
				if conditionsItem8.EqualsCondition != nil {
					var attribute8 string
					attribute8 = conditionsItem8.EqualsCondition.Attribute.ValueString()

					operation8 := shared.Operation(conditionsItem8.EqualsCondition.Operation.ValueString())
					values8 := make([]interface{}, 0, len(conditionsItem8.EqualsCondition.Values))
					for _, valuesItem8 := range conditionsItem8.EqualsCondition.Values {
						var valuesTmp8 interface{}
						_ = json.Unmarshal([]byte(valuesItem8.ValueString()), &valuesTmp8)
						values8 = append(values8, valuesTmp8)
					}
					equalsCondition8 := shared.EqualsCondition{
						Attribute: attribute8,
						Operation: operation8,
						Values:    values8,
					}
					conditions8 = append(conditions8, shared.GrantCondition{
						EqualsCondition: &equalsCondition8,
					})
				}
			}
			dependencies4 := make([]shared.Grant, 0, len(grantsItem4.Dependencies))
			for _, dependenciesItem4 := range grantsItem4.Dependencies {
				var action9 string
				action9 = dependenciesItem4.Action.ValueString()

				conditions9 := make([]shared.GrantCondition, 0, len(dependenciesItem4.Conditions))
				for _, conditionsItem9 := range dependenciesItem4.Conditions {
					if conditionsItem9.EqualsCondition != nil {
						var attribute9 string
						attribute9 = conditionsItem9.EqualsCondition.Attribute.ValueString()

						operation9 := shared.Operation(conditionsItem9.EqualsCondition.Operation.ValueString())
						values9 := make([]interface{}, 0, len(conditionsItem9.EqualsCondition.Values))
						for _, valuesItem9 := range conditionsItem9.EqualsCondition.Values {
							var valuesTmp9 interface{}
							_ = json.Unmarshal([]byte(valuesItem9.ValueString()), &valuesTmp9)
							values9 = append(values9, valuesTmp9)
						}
						equalsCondition9 := shared.EqualsCondition{
							Attribute: attribute9,
							Operation: operation9,
							Values:    values9,
						}
						conditions9 = append(conditions9, shared.GrantCondition{
							EqualsCondition: &equalsCondition9,
						})
					}
				}
				effect8 := new(shared.Effect)
				if !dependenciesItem4.Effect.IsUnknown() && !dependenciesItem4.Effect.IsNull() {
					*effect8 = shared.Effect(dependenciesItem4.Effect.ValueString())
				} else {
					effect8 = nil
				}
				resource8 := new(string)
				if !dependenciesItem4.Resource.IsUnknown() && !dependenciesItem4.Resource.IsNull() {
					*resource8 = dependenciesItem4.Resource.ValueString()
				} else {
					resource8 = nil
				}
				dependencies4 = append(dependencies4, shared.Grant{
					Action:     action9,
					Conditions: conditions9,
					Effect:     effect8,
					Resource:   resource8,
				})
			}
			effect9 := new(shared.GrantWithDependenciesEffect)
			if !grantsItem4.Effect.IsUnknown() && !grantsItem4.Effect.IsNull() {
				*effect9 = shared.GrantWithDependenciesEffect(grantsItem4.Effect.ValueString())
			} else {
				effect9 = nil
			}
			resource9 := new(string)
			if !grantsItem4.Resource.IsUnknown() && !grantsItem4.Resource.IsNull() {
				*resource9 = grantsItem4.Resource.ValueString()
			} else {
				resource9 = nil
			}
			grants4 = append(grants4, shared.GrantWithDependencies{
				Action:       action8,
				Conditions:   conditions8,
				Dependencies: dependencies4,
				Effect:       effect9,
				Resource:     resource9,
			})
		}
		var id4 string
		id4 = r.Schemas.ID.ValueString()

		var name4 string
		name4 = r.Schemas.Name.ValueString()

		var organizationId4 string
		organizationId4 = r.Schemas.OrganizationID.ValueString()

		var slug4 string
		slug4 = r.Schemas.Slug.ValueString()

		typeVar4 := shared.SchemasPortalRoleType(r.Schemas.Type.ValueString())
		portalRoleSchemas1 = &shared.PortalRoleSchemas1{
			ExpiresAt:      expiresAt4,
			Grants:         grants4,
			ID:             id4,
			Name:           name4,
			OrganizationID: organizationId4,
			Slug:           slug4,
			Type:           typeVar4,
		}
	}
	if portalRoleSchemas1 != nil {
		out = shared.RolePayload{
			PortalRoleSchemas1: portalRoleSchemas1,
		}
	}

	return &out, diags
}

func (r *RoleResourceModel) ToOperationsPutRoleRequest(ctx context.Context) (*operations.PutRoleRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	rolePayload, rolePayloadDiags := r.ToSharedRolePayload(ctx)
	diags.Append(rolePayloadDiags...)

	if diags.HasError() {
		return nil, diags
	}

	var roleID string
	roleID = r.ID.ValueString()

	out := operations.PutRoleRequest{
		RolePayload: rolePayload,
		RoleID:      roleID,
	}

	return &out, diags
}

func (r *RoleResourceModel) ToOperationsGetRoleRequest(ctx context.Context) (*operations.GetRoleRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var roleID string
	roleID = r.ID.ValueString()

	out := operations.GetRoleRequest{
		RoleID: roleID,
	}

	return &out, diags
}

func (r *RoleResourceModel) ToOperationsDeleteRoleRequest(ctx context.Context) (*operations.DeleteRoleRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var roleID string
	roleID = r.ID.ValueString()

	out := operations.DeleteRoleRequest{
		RoleID: roleID,
	}

	return &out, diags
}

func (r *RoleResourceModel) RefreshFromSharedRole(ctx context.Context, resp *shared.Role) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.UserRoleSchemas != nil {
			r.Schemas = &tfTypes.Schemas{}
			r.Schemas.ExpiresAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UserRoleSchemas.ExpiresAt))
			r.Schemas.Grants = []tfTypes.Grant{}
			if len(r.Schemas.Grants) > len(resp.UserRoleSchemas.Grants) {
				r.Schemas.Grants = r.Schemas.Grants[:len(resp.UserRoleSchemas.Grants)]
			}
			for grantsCount, grantsItem := range resp.UserRoleSchemas.Grants {
				var grants tfTypes.Grant
				grants.Action = types.StringValue(grantsItem.Action)
				grants.Conditions = []tfTypes.GrantCondition{}
				for conditionsCount, conditionsItem := range grantsItem.Conditions {
					var conditions tfTypes.GrantCondition
					if conditionsItem.EqualsCondition != nil {
						conditions.EqualsCondition = &tfTypes.EqualsCondition{}
						conditions.EqualsCondition.Attribute = types.StringValue(conditionsItem.EqualsCondition.Attribute)
						conditions.EqualsCondition.Operation = types.StringValue(string(conditionsItem.EqualsCondition.Operation))
						conditions.EqualsCondition.Values = nil
						for _, valuesItem := range conditionsItem.EqualsCondition.Values {
							var values types.String
							valuesResult, _ := json.Marshal(valuesItem)
							values = types.StringValue(string(valuesResult))
							conditions.EqualsCondition.Values = append(conditions.EqualsCondition.Values, values)
						}
					}
					if conditionsCount+1 > len(grants.Conditions) {
						grants.Conditions = append(grants.Conditions, conditions)
					} else {
						grants.Conditions[conditionsCount].EqualsCondition = conditions.EqualsCondition
					}
				}
				if grantsItem.Effect != nil {
					grants.Effect = types.StringValue(string(*grantsItem.Effect))
				} else {
					grants.Effect = types.StringNull()
				}
				grants.Resource = types.StringPointerValue(grantsItem.Resource)
				if grantsCount+1 > len(r.Schemas.Grants) {
					r.Schemas.Grants = append(r.Schemas.Grants, grants)
				} else {
					r.Schemas.Grants[grantsCount].Action = grants.Action
					r.Schemas.Grants[grantsCount].Conditions = grants.Conditions
					r.Schemas.Grants[grantsCount].Effect = grants.Effect
					r.Schemas.Grants[grantsCount].Resource = grants.Resource
				}
			}
			r.Schemas.ID = types.StringValue(resp.UserRoleSchemas.ID)
			r.ID = r.Schemas.ID
			r.Schemas.Name = types.StringValue(resp.UserRoleSchemas.Name)
			r.Name = r.Schemas.Name
			r.Schemas.OrganizationID = types.StringValue(resp.UserRoleSchemas.OrganizationID)
			r.OrganizationID = r.Schemas.OrganizationID
			r.Schemas.Slug = types.StringValue(resp.UserRoleSchemas.Slug)
			r.Slug = r.Schemas.Slug
			r.Schemas.Type = types.StringValue(string(resp.UserRoleSchemas.Type))
		}
	}

	return diags
}
